// Code generated by protofix; DO NOT EDIT.
// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package fix50sp1tradingsessionlistupdatereport is a format of the FIX.5.0 servicepack 1 TradingSessionListUpdateReport message.
package fix50sp1tradingsessionlistupdatereport

import (
	f0 "github.com/protofix/protofix/codecfix"
	"github.com/protofix/protofix/marshfix"
)

var (
	FIX50SP1TradingSessionListUpdateReportMarshaler   = marshfix.Marshal{Tag: "FIX50SP1", Format: FIX50SP1TradingSessionListUpdateReport}
	FIX50SP1TradingSessionListUpdateReportUnmarshaler = marshfix.Unmarshal{Tag: "FIX50SP1", Format: FIX50SP1TradingSessionListUpdateReport}
)

// FIX50SP1TradingSessionListUpdateReport is a FIX.5.0 servicepack 1 format of the TradingSessionListUpdateReport message which maps the codecs into individual fields.
var FIX50SP1TradingSessionListUpdateReport = f0.Format{
	Fields: map[int]f0.Codec{
		TradSesReqID335:           f0.Fld{Opt, f0.ASCII, f0.String(), f0.Var{1, 65536}},
		TradSesUpdateAction1327:   f0.Fld{Opt, f0.ASCII, f0.String(), f0.Con{1}},
		TradingSessionID336:       f0.Fld{Req, f0.ASCII, f0.String("1" /* DAY */, "2" /* HALFDAY */, "3" /* MORNING */, "4" /* AFTERNOON */, "5" /* EVENING */, "6" /* AFTER_HOURS */), f0.Var{1, 65536}},
		TradingSessionSubID625:    f0.Fld{Opt, f0.ASCII, f0.String("1" /* PRE_TRADING */, "2" /* OPENING_OR_OPENING_AUCTION */, "3" /* 3 */, "4" /* CLOSING_OR_CLOSING_AUCTION */, "5" /* POST_TRADING */, "6" /* INTRADAY_AUCTION */, "7" /* QUIESCENT */), f0.Var{1, 65536}},
		SecurityExchange207:       f0.Fld{Opt, f0.ASCII, f0.String(), f0.Var{1, 65536}},
		TradSesMethod338:          f0.Fld{Opt, f0.ASCII, f0.IntDefault(1 /* ELECTRONIC */, 2 /* OPEN_OUTCRY */, 3 /* TWO_PARTY */), f0.Var{1, 19}},
		TradSesMode339:            f0.Fld{Opt, f0.ASCII, f0.IntDefault(1 /* TESTING */, 2 /* SIMULATED */, 3 /* PRODUCTION */), f0.Var{1, 19}},
		UnsolicitedIndicator325:   f0.Fld{Opt, f0.ASCII, f0.BoolDefault(false /* NO */, true /* YES */), f0.Con{1}},
		TradSesStatus340:          f0.Fld{Req, f0.ASCII, f0.IntDefault(0 /* UNKNOWN */, 1 /* HALTED */, 2 /* OPEN */, 3 /* CLOSED */, 4 /* PRE_OPEN */, 5 /* PRE_CLOSE */, 6 /* REQUEST_REJECTED */), f0.Var{1, 19}},
		TradSesStatusRejReason567: f0.Fld{Opt, f0.ASCII, f0.IntDefault(1 /* UNKNOWN_OR_INVALID_TRADINGSESSIONID */, 99 /* OTHER */), f0.Var{1, 19}},
		TradSesStartTime341:       f0.Fld{Opt, f0.ASCII, f0.UTCTimestampMillisecondTime(), f0.Var{1, 27}},
		TradSesOpenTime342:        f0.Fld{Opt, f0.ASCII, f0.UTCTimestampMillisecondTime(), f0.Var{1, 27}},
		TradSesPreCloseTime343:    f0.Fld{Opt, f0.ASCII, f0.UTCTimestampMillisecondTime(), f0.Var{1, 27}},
		TradSesCloseTime344:       f0.Fld{Opt, f0.ASCII, f0.UTCTimestampMillisecondTime(), f0.Var{1, 27}},
		TradSesEndTime345:         f0.Fld{Opt, f0.ASCII, f0.UTCTimestampMillisecondTime(), f0.Var{1, 27}},
		TotalVolumeTraded387:      f0.Fld{Opt, f0.ASCII, f0.Float(), f0.Var{1, 19}},
		Text58:                    f0.Fld{Opt, f0.ASCII, f0.String(), f0.Var{1, 65536}},
		EncodedTextLen354:         f0.Fld{Opt, f0.ASCII, f0.Length(), f0.Var{1, 19}},
		EncodedText355:            f0.Fld{Opt, f0.ASCII, f0.Bytes(), f0.Var{1, 65536}},
		MarketID1301:              f0.Fld{Opt, f0.ASCII, f0.String(), f0.Var{1, 65536}},
		MarketSegmentID1300:       f0.Fld{Opt, f0.ASCII, f0.String(), f0.Var{1, 65536}},
		TradingSessionDesc1326:    f0.Fld{Opt, f0.ASCII, f0.String(), f0.Var{1, 65536}},
		OrdType40:                 f0.Fld{Opt, f0.ASCII, f0.String("1" /* MARKET */, "2" /* LIMIT */, "3" /* STOP */, "4" /* STOP_LIMIT */, "5" /* MARKET_ON_CLOSE */, "6" /* WITH_OR_WITHOUT */, "7" /* LIMIT_OR_BETTER */, "8" /* LIMIT_WITH_OR_WITHOUT */, "9" /* ON_BASIS */, "A" /* ON_CLOSE */, "B" /* LIMIT_ON_CLOSE */, "C" /* FOREX_MARKET */, "D" /* PREVIOUSLY_QUOTED */, "E" /* PREVIOUSLY_INDICATED */, "F" /* FOREX_LIMIT */, "G" /* FOREX_SWAP */, "H" /* FOREX_PREVIOUSLY_QUOTED */, "I" /* FUNARI */, "J" /* MARKET_IF_TOUCHED */, "K" /* MARKET_WITH_LEFT_OVER_AS_LIMIT */, "L" /* PREVIOUS_FUND_VALUATION_POINT */, "M" /* NEXT_FUND_VALUATION_POINT */, "P" /* PEGGED */, "Q" /* COUNTER_ORDER_SELECTION */), f0.Con{1}},
		TimeInForce59:             f0.Fld{Opt, f0.ASCII, f0.String("0" /* DAY */, "1" /* GOOD_TILL_CANCEL */, "2" /* AT_THE_OPENING */, "3" /* IMMEDIATE_OR_CANCEL */, "4" /* FILL_OR_KILL */, "5" /* GOOD_TILL_CROSSING */, "6" /* GOOD_TILL_DATE */, "7" /* AT_THE_CLOSE */, "8" /* GOOD_THROUGH_CROSSING */, "9" /* AT_CROSSING */), f0.Con{1}},
		ExecInstValue1308:         f0.Fld{Opt, f0.ASCII, f0.String(), f0.Con{1}},
		MatchAlgorithm1142:        f0.Fld{Opt, f0.ASCII, f0.String(), f0.Var{1, 65536}},
		MatchType574:              f0.Fld{Opt, f0.ASCII, f0.String("A1" /* EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES_AND_EXECUTION_TIME */, "A2" /* EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES */, "A3" /* EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES_AND_EXECUTION_TIME */, "A4" /* EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES */, "A5" /* EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADETYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME */, "M3" /* ACT_ACCEPTED_TRADE */, "M4" /* ACT_DEFAULT_TRADE */, "M5" /* ACT_DEFAULT_AFTER_M2 */, "M6" /* ACT_M6_MATCH */, "AQ" /* COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS_PAIR_OFFS */, "M1" /* EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_MINUS_BADGES_AND_TIMES_ACT_M1_MATCH */, "M2" /* SUMMARIZED_MATCH_MINUS_BADGES_AND_TIMES_ACT_M2_MATCH */, "MT" /* OCS_LOCKED_IN_NON_ACT */, "S1" /* SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIED */, "S2" /* SUMMARIZED_MATCH_USING_A2_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED */, "S3" /* SUMMARIZED_MATCH_USING_A3_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED */, "S4" /* SUMMARIZED_MATCH_USING_A4_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED */, "S5" /* SUMMARIZED_MATCH_USING_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED */, "1" /* ONE_PARTY_TRADE_REPORT */, "2" /* TWO_PARTY_TRADE_REPORT */, "3" /* CONFIRMED_TRADE_REPORT */, "4" /* AUTO_MATCH */, "5" /* CROSS_AUCTION */, "6" /* COUNTER_ORDER_SELECTION */, "7" /* CALL_AUCTION */, "8" /* ISSUING_BUY_BACK_AUCTION */), f0.Var{1, 65536}},
		MDFeedType1022:            f0.Fld{Opt, f0.ASCII, f0.String(), f0.Var{1, 65536}},
		MarketDepth264:            f0.Fld{Opt, f0.ASCII, f0.IntDefault(), f0.Var{1, 19}},
		MDBookType1021:            f0.Fld{Opt, f0.ASCII, f0.IntDefault(1 /* TOP_OF_BOOK */, 2 /* PRICE_DEPTH */, 3 /* ORDER_DEPTH */), f0.Var{1, 19}},
		ApplID1180:                f0.Fld{Opt, f0.ASCII, f0.String(), f0.Var{1, 65536}},
		ApplSeqNum1181:            f0.Fld{Opt, f0.ASCII, f0.SeqNum(), f0.Var{1, 19}},
		ApplLastSeqNum1350:        f0.Fld{Opt, f0.ASCII, f0.SeqNum(), f0.Var{1, 19}},
		ApplResendFlag1352:        f0.Fld{Opt, f0.ASCII, f0.BoolDefault(), f0.Con{1}},
	},
	Unknown0: f0.UnknownFld{f0.ASCII, f0.Unknown(), f0.Var{1, 65536}},
	Sort: []int{
		TradSesReqID335,           // STRING
		TradSesUpdateAction1327,   // CHAR
		TradingSessionID336,       // STRING
		TradingSessionSubID625,    // STRING
		SecurityExchange207,       // EXCHANGE
		TradSesMethod338,          // INT
		TradSesMode339,            // INT
		UnsolicitedIndicator325,   // BOOLEAN
		TradSesStatus340,          // INT
		TradSesStatusRejReason567, // INT
		TradSesStartTime341,       // UTCTIMESTAMP
		TradSesOpenTime342,        // UTCTIMESTAMP
		TradSesPreCloseTime343,    // UTCTIMESTAMP
		TradSesCloseTime344,       // UTCTIMESTAMP
		TradSesEndTime345,         // UTCTIMESTAMP
		TotalVolumeTraded387,      // QTY
		Text58,                    // STRING
		EncodedTextLen354,         // LENGTH
		EncodedText355,            // DATA
		MarketID1301,              // EXCHANGE
		MarketSegmentID1300,       // STRING
		TradingSessionDesc1326,    // STRING
		OrdType40,                 // CHAR
		TimeInForce59,             // CHAR
		ExecInstValue1308,         // CHAR
		MatchAlgorithm1142,        // STRING
		MatchType574,              // STRING
		MDFeedType1022,            // STRING
		MarketDepth264,            // INT
		MDBookType1021,            // INT
		ApplID1180,                // STRING
		ApplSeqNum1181,            // SEQNUM
		ApplLastSeqNum1350,        // SEQNUM
		ApplResendFlag1352,        // BOOLEAN
	},
}

const Req, Opt = true, false

const (
	TradSesReqID335           = 335  // STRING
	TradSesUpdateAction1327   = 1327 // CHAR
	TradingSessionID336       = 336  // STRING
	TradingSessionSubID625    = 625  // STRING
	SecurityExchange207       = 207  // EXCHANGE
	TradSesMethod338          = 338  // INT
	TradSesMode339            = 339  // INT
	UnsolicitedIndicator325   = 325  // BOOLEAN
	TradSesStatus340          = 340  // INT
	TradSesStatusRejReason567 = 567  // INT
	TradSesStartTime341       = 341  // UTCTIMESTAMP
	TradSesOpenTime342        = 342  // UTCTIMESTAMP
	TradSesPreCloseTime343    = 343  // UTCTIMESTAMP
	TradSesCloseTime344       = 344  // UTCTIMESTAMP
	TradSesEndTime345         = 345  // UTCTIMESTAMP
	TotalVolumeTraded387      = 387  // QTY
	Text58                    = 58   // STRING
	EncodedTextLen354         = 354  // LENGTH
	EncodedText355            = 355  // DATA
	MarketID1301              = 1301 // EXCHANGE
	MarketSegmentID1300       = 1300 // STRING
	TradingSessionDesc1326    = 1326 // STRING
	OrdType40                 = 40   // CHAR
	TimeInForce59             = 59   // CHAR
	ExecInstValue1308         = 1308 // CHAR
	MatchAlgorithm1142        = 1142 // STRING
	MatchType574              = 574  // STRING
	MDFeedType1022            = 1022 // STRING
	MarketDepth264            = 264  // INT
	MDBookType1021            = 1021 // INT
	ApplID1180                = 1180 // STRING
	ApplSeqNum1181            = 1181 // SEQNUM
	ApplLastSeqNum1350        = 1350 // SEQNUM
	ApplResendFlag1352        = 1352 // BOOLEAN
)
