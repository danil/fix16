// Code generated by protofix; DO NOT EDIT.
// Copyright {{.Year}} The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package {{.Package}} is a format of the {{.FormatDesc}} {{.Message}} message.
package {{.Package}}

import (
	f0 "github.com/protofix/protofix/codecfix"
	"github.com/protofix/protofix/marshfix"
)

var (
	{{.Format}}{{.Message}}Marshaler   = marshfix.Marshal{Tag: "{{.Format}}", Format: {{.Format}}{{.Message}}}
	{{.Format}}{{.Message}}Unmarshaler = marshfix.Unmarshal{Tag: "{{.Format}}", Format: {{.Format}}{{.Message}}}
)

// {{.Format}}{{.Message}} is a {{.FormatDesc}} format of the {{.Message}} message which maps the codecs into individual fields.
var {{.Format}}{{.Message}} = f0.Format{
	Fields: map[int]f0.Codec{
		{{- range .Codecs}}
			{{.Name}}{{.Number}}: f0.Fld{
				{{- if .Required -}} Req {{- else -}} Opt {{- end -}}, {{- /**/ -}}
				f0.ASCII, {{- /**/ -}}
				f0.{{.Serializer}}(
					{{- $number := .Number -}}
					{{- $type := .Type -}}
					{{- range .Enums -}}
						{{- EnumFormat $number $type .Value -}}
						{{- if ne .Description "" -}}
							/* {{.Description}} */
						{{- end -}}
						,
					{{- end -}}
				),
				{{- if and (ne .MinLen 0) (eq .MinLen .MaxLen) -}}
					f0.Con{ {{- .MinLen -}} }
				{{- else -}}
					f0.Var{ {{- .MinLen -}}, {{- .MaxLen -}} }
				{{- end -}} },
		{{- end}}
	},
	{{- range .SpecialCodecs -}}
		{{- template "specialCodec" . -}}
	{{- end}}
	Sort: []int{
	{{- range .Sort}}
		{{.Name}}{{.Number}}, // {{.Type}}
	{{- end}}
	},
}

const Req, Opt = true, false

const (
{{- range .Constants}}
	{{.Name}}{{.Number}} = {{.Number}} // {{.Type}}
{{- end}}
)

{{define "specialCodec"}}
	{{.Name}}{{.Number}}: f0.{{.Name}}Fld{  {{- /**/ -}}
		f0.ASCII, {{- /**/ -}}
		f0.{{.Serializer}}(
			{{- $number := .Number -}}
			{{- $type := .Type -}}
			{{- range .Enums -}}
				{{- EnumFormat $number $type .Value -}}
				{{- if ne .Description "" -}}
					/* {{.Description}} */
				{{- end -}}
				,
			{{- end -}}
		),
		{{- if and (ne .MinLen 0) (eq .MinLen .MaxLen) -}}
			f0.Con{ {{- .MinLen -}} },
		{{- else -}}
			f0.Var{ {{- .MinLen -}}, {{- .MaxLen -}} },
		{{- end -}}

	},
{{- end}}
